

#include "stdafx.h"
#include <my_global.h>
#include <stdlib.h>
#include <stdio.h>
#include <winsock2.h>
#include <mysql.h>
#include "time.h"
#pragma comment(lib, "libmysql.lib")


#define DB_HOST "localhost"
#define DB_USER "root"
#define DB_PASS "1234"
#define DB_NAME "test"
#define MAX_VERTEX 600
#define AVG_NUM 1000


char query[255];
int w = 0, b = 0, x = 0, A_MIN = 0, A_MAX = 0, O_MIN = 0, O_MAX = 0, N_MIN = 0, N_MAX = 0, A_sum = 0, O_sum = 0, N_sum = 0,
A_i = 0, O_i = 0, N_i = 0, P_C = -500, AVG_a = 0, AVG_o = 0, AVG_n = 0;

int query_stat = 0;

typedef struct {
	int n;
	int adjMatrix[MAX_VERTEX][MAX_VERTEX];
} Graph;

void createGraph(Graph* g);
void insertVertex(Graph* g, int v);
void insertEdge(Graph* g, int u, int v);
void print_adjMatrix(Graph* g);
void print_color(int* arr, int len, int B, int W, int X);
void shuffle(int * index, int nMax);


int main(void)
{
	MYSQL       *connection = NULL, conn;
	MYSQL_RES   *sql_result;
	MYSQL_ROW   sql_row;

	mysql_init(&conn);
	connection = mysql_real_connect(&conn, DB_HOST, DB_USER, DB_PASS, DB_NAME, 3306, (char *)NULL, 0);
	if (connection == NULL) {
		fprintf(stderr, "Mysql connection error : %s", mysql_error(&conn));
		return 1;
	}

	int user_size, percent, rotation;
	int count_node = 0, threshold = 0, black_node = 0, white_node = 0, colorless_node = 0;
	int num_ddorai, num_gozip;
	int i, j;
	int color[MAX_VERTEX];
	int edge_L, edge_R, number_edge, index_vertex = 0;
	int rot, rot_1;
	srand(time(NULL));

	user_size = 20;
	percent = 70;


	rot_1 = ceil((double)user_size * 1 / 100 * (double)3);
	rot = floor((double)user_size / (double)rot_1);
	rotation = rot;


	/*그래프 생성*/
	Graph* g1;
	g1 = (Graph*)malloc(sizeof(Graph));
	createGraph(g1);


	FILE* fp = 0;
	fopen_s(&fp, "result.txt", "wt");
	if (fp == NULL) {
		puts("파일오픈에러");
		exit(1);
	}
	fprintf(fp, "%s %c", "graph G {", '\n');
		


	/*바라바시 알버트 방법으로 그래프를 형성*/
	int indegree = 0, pick;
	int array[MAX_VERTEX], arr_index = 0, c = 10;

	insertVertex(g1, 0);   
	for (i = 1; i < user_size; i++) {
		insertVertex(g1, i);   
		edge_L = i;    
		if (edge_L == 1) {
			insertEdge(g1, edge_L, 0);  
		}
		else {    
			do {
				number_edge = (rand() % 2) + 2;   
			} while ((g1->n)-1 < number_edge);
			for (int z = 0; z < number_edge; z++) {   
				int y, j;
				for (y = 0; y < (g1->n) - 1; y++) {
					for (j = 0; j < (g1->n) - 1; j++) {
						if (g1->adjMatrix[y][j] == 1)
							indegree++;
					}
					indegree += c;   
					while (indegree > 0) {
						array[arr_index++] = y;   
						indegree--;
					}
				}
				pick = rand() % arr_index;  
				edge_R = array[pick];   
				insertEdge(g1, edge_L, edge_R);
				fprintf(fp, "%c%d%c%c%d%c", '\t', edge_L, '-', '-', edge_R, ';');
				fprintf(fp, "%c", '\n');
				arr_index = 0;   

			}
		}
	}
	fprintf(fp, "%s", "} ");
	//==================================================================================================================

	/* 각 노드에 color 정해줌 & 노드관계 파일출력하기 */
	int approve, opposite, neutral, selec, selec_array[MAX_VERTEX] = { 0, }, s_index = 0;
	approve = ceil((double)user_size * 1 / 100 * (double)40              );
	opposite = ceil((double)user_size * 1 / 100 * (double)40                );
	neutral = ceil((double)user_size * 1 / 100 * (double)20             );

	for (int i = 0; i < approve; i++)
		selec_array[s_index++] = 1;
	for (int i = 0; i< opposite; i++)
		selec_array[s_index++] = 0;
	for (int i = 0; i< neutral; i++)
		selec_array[s_index++] = 2;
	shuffle(selec_array, user_size);	//배열원소들 무작위로 섞기
	for (int i = 0; i < user_size; i++)
		color[i] = selec_array[i];		//초기 color를 정해줌


	
	

	//=================================================================================================


	int rotation_info[MAX_VERTEX] = { 0 };   //일정한 수를 회전하기위한 값을 저장하는 배열
	int skip_info[MAX_VERTEX], change[MAX_VERTEX];      // 노드가 어떤 종류인지 구분하기 위한 배열, //한 generation당 바꿀 정보를 담고있는 배열

	/*generation 시작*/
	print_adjMatrix(g1);

	int auto_incre = 1, toBlack = 0, toWhite = 0, toColorLess = 0;
	print_color(color, user_size, toWhite, toBlack, toColorLess);   // 초기 노드색을 출력
	printf("\n");

	while (1) {
		for (int h = 0; h < MAX_VERTEX; h++)
			skip_info[h] = 1;       //  모두 1로 초기화

		for (int j = 0; j < user_size; j++) {
			if (rotation == 0)
				break;
			else
				rotation_info[j] = rand() % rotation + 1;
		}
		//for (int i = 0; i < user_size; i++)
		//	printf("%d ", rotation_info[i]);   // rotation num을 찍음

		for (int i = 0; i < user_size; i++) {
			if (rotation_info[i] == rotation) {
				skip_info[i] = -1;		// i 번째 노드는 반대로 작동하게 설정 
			}
		}

		sprintf_s(query, "insert into login values "  // db에 값을 저장하는 쿼리문
			"('%d', '%d','%d','%d')", auto_incre++, w - 1, b - 1, x - 1);
		query_stat = mysql_query(connection, query);
		w = 0, b = 0, x = 0;

		getchar();	//무한반복 방지, one generation 실행

		for (int i = 0; i < user_size; i++)   // change를 원 color로 칠해줌
			change[i] = color[i];

		for (i = 0; i < user_size; i++) {
			for (j = 0; j < user_size; j++) {
				if (g1->adjMatrix[i][j] == 1) {    //연결 되어 있음
					count_node++;
					if (color[j] == 1)
						black_node++;	//블랙노드 갯수
					else if (color[j] == 0)
						white_node++;	//화이트노드 갯수
					else
						colorless_node++;	//무색노드 갯수
				}
			}
			threshold = ceil((double)(count_node) * 1 / 100 * (double)percent);

			if (skip_info[i] < 0) {		//또라이 노드일 경우
				if (color[i] == 1) {	  // 내 색은 검은색
					if (white_node != 0 && white_node >= (int)threshold) {
						//printf("\t***%3d번 노드:내 색은 검은색, threshold %d를 넘어갔으므로 안바뀜\n", i, threshold);
					}
					else if (colorless_node != 0 && colorless_node >= (int)threshold) {
						//printf("\t***%3d번 노드: 내 색은 검은색, threshold %d를 넘어갔으므로 안바뀜\n", i, threshold);
					}
					else {
						//printf("\t%***3d번 노드: 내 색은 검은색, threshold %d를 못넘어갔으므로 바뀜\n", i, threshold);
						if (white_node > colorless_node) {
							change[i] = 2;
							toColorLess++;
						}
						else {
							change[i] = 0;
							toWhite++;
						}
					}
				}
				else if (color[i] == 0) {    // 내색은 흰색
					if (black_node != 0 && black_node >= (int)threshold) {
						//printf("\t***%3d번 노드:내 색은 흰색, threshold %d를 넘어갔으므로 안바뀜\n", i, threshold);
					}
					else if (colorless_node != 0 && colorless_node >= (int)threshold) {
						//printf("\t***%3d번 노드: 내 색은 흰색, threshold %d를 넘어갔으므로 안바뀜\n", i, threshold);
					}
					else {
						//printf("\t***%3d번 노드: 내 색은 흰색, threshold %d를 못 넘어갔으므로 바뀜\n", i, threshold);
						if (black_node > colorless_node) {
							change[i] = 2;
							toColorLess++;
						}
						else {
							change[i] = 1;
							toBlack++;
						}
					}
				}
				else {  // 내색은 무색
					if (black_node != 0 && black_node >= (int)threshold) {
						//printf("\t***%3d번 노드: 내 색은 무색, threshold %d를 넘어갔으므로 안바뀜\n", i, threshold);
					}
					else if (white_node != 0 && white_node >= (int)threshold) {
						//printf("\t***%3d번 노드: 내 색은 무색, threshold %d를 넘어갔으므로 안바뀜\n", i, threshold);
					}
					else {
						//printf("\t***%3d번 노드: 내 색은 무색, threshold %d를 못 넘어갔으므로 바뀌지 않음\n", i, threshold);
						if (white_node > black_node) {
							change[i] = 1;
							toBlack++;
						}
						else {
							change[i] = 0;
							toWhite++;
						}
					}
				}
			}
			//********************************************************************************************************



			if (skip_info[i] > 0) {		//정상 노드일 경우
				if (color[i] == 1) {	  // 내 색은 검은색
					if (white_node != 0 && white_node >= (int)threshold) {
						//printf("\t%3d번 노드:내 색은 검은색, threshold %d를 넘어갔으므로 b->w로 바뀜\n", i, threshold);
						//change[i] = 0;
						//toWhite++;
					}
					else if (colorless_node != 0 && colorless_node >= (int)threshold) {
						//printf("\t%3d번 노드: 내 색은 검은색, threshold %d를 넘어갔으므로 b->x로 바뀜\n", i, threshold);
						change[i] = 2;
						toColorLess++;
					}
					else {
						//printf("\t%3d번 노드: 내 색은 검은색, threshold %d를 못넘어갔으므로 바뀌지 않음\n", i, threshold);
					}
				}
				else if (color[i] == 0) {    // 내색은 흰색
					if (black_node != 0 && black_node >= (int)threshold) {
						//printf("\t%3d번 노드:내 색은 흰색, threshold %d를 넘어갔으므로 w->b로 바뀜\n", i, threshold);
						//change[i] = 1;
						//toBlack++;
					}
					else if (colorless_node != 0 && colorless_node >= (int)threshold) {
						//printf("\t%3d번 노드: 내 색은 흰색, threshold %d를 넘어갔으므로 w->x로 바뀜\n", i, threshold);
						change[i] = 2;
						toColorLess++;
					}
					else {
						//printf("\t%3d번 노드: 내 색은 흰색, threshold %d를 못 넘어갔으므로 바뀌지 않음\n", i, threshold);
					}
				}
				else {  // 내색은 무색
					if (black_node != 0 && black_node >= (int)threshold) {
						//printf("\t%3d번 노드: 내 색은 무색, threshold %d를 넘어갔으므로 x->b로 바뀜\n", i, threshold);
						//change[i] = 1;
						//toBlack++;
					}
					else if (white_node != 0 && white_node >= (int)threshold) {
						//printf("\t%3d번 노드: 내 색은 무색, threshold %d를 넘어갔으므로 x->w로 바뀜\n", i, threshold);
						//change[i] = 0;
						//toWhite++;
					}
					else {
						//printf("\t%3d번 노드: 내 색은 무색, threshold %d를 못 넘어갔으므로 바뀌지 않음\n", i, threshold);
					}
				}
			}
			count_node = 0, black_node = 0, white_node = 0, colorless_node = 0;

		} //one generation을 돌았음

		  /* 이제는 한번에 색을 바꿀 차례 */
		for (int i = 0; i < user_size; i++) {
			color[i] = change[i];
		}
		print_color(color, user_size, toWhite, toBlack, toColorLess);   // 노드들의 색을 출력
		toWhite = 0, toBlack = 0, toColorLess = 0;

	}  // while문 끝남

	mysql_close(connection);
	fclose(fp);
	return 0;
}

void print_color(int* arr, int len, int B, int W, int X) {
	P_C++;
	char Board[10];
	int A, O, N, A_P, O_P, N_P;
	Board[0] = '■' >> 8;
	Board[1] = '■';
	Board[2] = '□' >> 8;
	Board[3] = '□';
	Board[4] = '×' >> 8;
	Board[5] = '×';
	for (int i = 0; i < len; i++) {
		if (arr[i] == 1) {    // 1이면 black
			printf("%c%c", Board[2], Board[3]);
			b++;
		}
		else if (arr[i] == 0) {   // 0이면 white 이다.
			printf("%c%c", Board[0], Board[1]);
			w++;
		}
		else {		// 2이면 무색이다
			printf("%c%c", Board[4], Board[5]);
			x++;
		}
	}
	//printf(" W->B:%2d B->W:%2d ", W, B);
	A = b++;
	O = w++;
	N = x++;
	A_P = ceil((double)A / (double)len * 100);
	O_P = ceil((double)O / (double)len * 100);
	N_P = ceil((double)N / (double)len * 100);

	if (P_C == 0) {
		A_MIN = A_P;
		A_MAX = A_P;
		O_MIN = O_P;
		O_MAX = O_P;
		N_MIN = N_P;
		N_MAX = N_P;
	}
	if (P_C > 0) {
		if (A_P < A_MIN)
			A_MIN = A_P;
		if (A_P > A_MAX)
			A_MAX = A_P;
		if (O_P < O_MIN)
			O_MIN = O_P;
		if (O_P > O_MAX)
			O_MAX = O_P;
		if (N_P < N_MIN)
			N_MIN = N_P;
		if (N_P > N_MAX)
			N_MAX = N_P;
		A_sum += A_P;
		A_i++;
		O_sum += O_P;
		O_i++;
		N_sum += N_P;
		N_i++;
		AVG_a = A_sum / A_i;
		AVG_o = O_sum / O_i;
		AVG_n = N_sum / N_i;
	}
	if (P_C <= 0)
		printf(" A:%2d(%2d%%)  O:%2d(%2d%%)  X:%2d(%2d%%) ", A, A_P, O, O_P, N, N_P);
	else
		printf("\n	A:%2d(%2d%%)[min:%2d,avg:%2d,max:%2d]    O:%2d(%2d%%)[min:%2d,avg:%2d,max:%2d]    X:%2d(%2d%%)[min:%2d,avg:%2d,max:%2d]"
			, A, A_P, A_MIN, AVG_a, A_MAX, O, O_P, O_MIN, AVG_o, O_MAX, N, N_P, N_MIN, AVG_n, N_MAX);

	printf("\n");
}

void shuffle(int * index, int nMax) {
	int i, n;
	int nTmp;
	srand(time(NULL));
	for (i = nMax - 1; i >= 0; i--) {
		n = rand() % nMax;
		nTmp = index[i];
		index[i] = index[n];
		index[n] = nTmp;
	}
}

void createGraph(Graph* g) {
	int i, j;
	g->n = 0;
	for (i = 0; i < MAX_VERTEX; i++) {   // 인접행렬 모두 0으로 초기화
		for (j = 0; j < MAX_VERTEX; j++)
			g->adjMatrix[i][j] = 0;
	}
}

void insertVertex(Graph* g, int v) {
	if (((g->n) + 1) > MAX_VERTEX) {
		printf("\n 정점갯수 초과했습니다.");
		return;
	}
	g->n++;
}

void insertEdge(Graph* g, int u, int v) {
	if (u >= g->n || v >= g->n) {
		printf("\n 그래프에 없는 정점입니다.\n");
		return;
	}
	g->adjMatrix[u][v] = 1;
	g->adjMatrix[v][u] = 1;
}

void print_adjMatrix(Graph* g) {
	printf("Show adjacency Matrix!");
	int i, j;
	for (i = 0; i < (g->n); i++) {
		printf("\n");
		for (j = 0; j < (g->n); j++)
			printf("%2d", g->adjMatrix[i][j]);
	}
	printf("\n");
}
